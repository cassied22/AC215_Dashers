name: CI/CD Pipeline

on:
  push:
    branches: [ milestone5 ]
  pull_request:
    branches: [ milestone5 ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    env:
      CHROMADB_HOST: recipe-rag-chromadb
      CHROMADB_PORT: 8000
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      # Setup environment file
      - name: Create environment file
        run: |
          cat << EOF > .env
          GCP_PROJECT=${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/credentials.json
          CHROMADB_HOST=recipe-rag-chromadb
          CHROMADB_PORT=8000
          EOF
      
      # API Service Tests
      - name: Run API Service Tests
        run: |
          cd src/api-service
          mkdir -p secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > secrets/credentials.json
          docker build -t api-service-tests -f Dockerfile .
          docker run --rm \
            --env-file ../../.env \
            --network recipe-rag-network \
            -v $(pwd)/secrets:/app/secrets:ro \
            api-service-tests pytest \
              --cov=. \
              --cov-report=xml:/coverage/coverage.xml \
              ../tests/api-service/
      
      # Data Pipeline Tests
      - name: Run Data Pipeline Tests
        run: |
          cd src/datapipeline
          mkdir -p secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > secrets/credentials.json
          docker build -t datapipeline-tests -f Dockerfile .
          docker run --rm \
            --env-file ../../.env \
            --network recipe-rag-network \
            -v $(pwd)/secrets:/app/secrets:ro \
            datapipeline-tests pytest \
              --cov=. \
              --cov-report=xml:/coverage/coverage.xml \
              ../tests/datapipeline/

      # Food Detection Tests
      - name: Run Food Detection Tests
        run: |
          cd src/food-detection
          mkdir -p secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > secrets/credentials.json
          docker build -t food-detection-tests -f Dockerfile .
          docker run --rm \
            --env-file ../../.env \
            --network recipe-rag-network \
            -v $(pwd)/secrets:/app/secrets:ro \
            food-detection-tests pytest \
              --cov=. \
              --cov-report=xml:/coverage/coverage.xml \
              ../tests/food-detection/

      # ML Pipeline Tests
      - name: Run ML Pipeline Tests
        run: |
          cd src/ml-pipeline
          mkdir -p secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > secrets/credentials.json
          docker build -t ml-pipeline-tests -f Dockerfile .
          docker run --rm \
            --env-file ../../.env \
            --network recipe-rag-network \
            -v $(pwd)/secrets:/app/secrets:ro \
            ml-pipeline-tests pytest \
              --cov=. \
              --cov-report=xml:/coverage/coverage.xml \
              ../tests/ml-pipeline/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: "**/coverage.xml"

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    env:
      CHROMADB_HOST: recipe-rag-chromadb
      CHROMADB_PORT: 8000
    steps:
      - uses: actions/checkout@v2
      - name: Create Docker Network
        run: docker network create recipe-rag-network || true
      - name: Setup Directories
        run: |
          mkdir -p src/secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
      - name: Run Integration Tests
        run: |
          cd tests/integration
          docker-compose build --no-cache
          docker-compose up --exit-code-from recipe-rag-cli --exit-code-from food-detection
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      - name: Print Docker logs on failure
        if: failure()
        run: |
          cd tests/integration
          docker-compose logs
      - name: Clean up
        if: always()
        run: |
          cd tests/integration
          docker-compose down -v
          docker network rm recipe-rag-network || true

  coverage-check:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
      - name: Check coverage threshold
        run: |
          pip install coverage
          coverage combine coverage.xml
          coverage report --fail-under=70