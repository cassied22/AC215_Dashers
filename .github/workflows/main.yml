name: CI/CD Pipeline

on:
  push:
    branches: [ milestone5 ]
  pull_request:
    branches: [ milestone5 ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      # Setup environment
      - name: Create secrets directory
        run: |
          mkdir -p src/secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json

      # Data Pipeline Tests
      - name: Run Data Pipeline Tests
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r src/datapipeline/requirements.txt
          cd tests/datapipeline
          PYTHONPATH=$PYTHONPATH:../../src/datapipeline python -m pytest \
            test_cli_rag.py \
            -v \
            --cov=../../src/datapipeline \
            --cov-report=html:../../tests/coverage-report/datapipeline
        env:
          PYTHONPATH: ${{ github.workspace }}/src/datapipeline
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

      # Food Detection Tests
      - name: Run Food Detection Tests
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r src/food-detection/requirements.txt
          cd tests/food-detection
          PYTHONPATH=$PYTHONPATH:../../src/food-detection python -m pytest \
            test_gemini_object_detection.py \
            test_gpt_object_detection.py \
            -v \
            --cov=../../src/food-detection \
            --cov-report=html:../../tests/coverage-report/food-detection
        env:
          PYTHONPATH: ${{ github.workspace }}/src/food-detection
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      # ML Pipeline Tests
      - name: Run ML Pipeline Tests
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r src/ml-pipeline/requirements.txt
          cd tests/ml-pipeline
          PYTHONPATH=$PYTHONPATH:../../src/ml-pipeline python -m pytest \
            test_*.py \
            -v \
            --cov=../../src/ml-pipeline \
            --cov-report=html:../../tests/coverage-report/ml-pipeline
        env:
          PYTHONPATH: ${{ github.workspace }}/src/ml-pipeline
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: tests/coverage-report/

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Setup Directories
        run: |
          mkdir -p src/secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json
      - name: Run Integration Tests
        run: |
          cd tests/integration
          docker-compose build --no-cache
          docker-compose up --exit-code-from recipe-rag-cli --exit-code-from food-detection
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
      - name: Print Docker logs on failure
        if: failure()
        run: |
          cd tests/integration
          docker-compose logs
      - name: Clean up
        if: always()
        run: |
          cd tests/integration
          docker-compose down -v
          docker network rm recipe-rag-network || true

  coverage-check:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
      - name: Check coverage threshold
        run: |
          pip install coverage
          coverage combine **/coverage.xml
          coverage report --fail-under=70