name: CI/CD Pipeline

on:
  push:
    branches: [ milestone5 ]
  pull_request:
    branches: [ milestone5 ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    env:
      CHROMADB_HOST: recipe-rag-chromadb
      CHROMADB_PORT: 8000
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Create Docker network
      - name: Create Docker network
        run: docker network create recipe-rag-network || true

      # Start ChromaDB container
      - name: Start ChromaDB
        run: |
          docker run -d \
            --name recipe-rag-chromadb \
            --network recipe-rag-network \
            -p 8000:8000 \
            chromadb/chroma:latest

      # Create necessary directories
      - name: Create directories
        run: |
          mkdir -p src/secrets
          mkdir -p persistent-folder

      # Setup secrets and configs
      - name: Setup secrets
        run: |
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json

      # API Service Tests
      - name: Run API Service Tests
        run: |
          cd src/api-service
          docker build -t daily-meal-api-service -f Dockerfile .
          docker run --rm \
            -v "$(pwd)":/app \
            -v "$(pwd)/../secrets":/secrets \
            -v "$(pwd)/../../persistent-folder":/persistent \
            -v "$(pwd)/../../tests/api-service":/app/tests \
            --network recipe-rag-network \
            -e GOOGLE_APPLICATION_CREDENTIALS=/secrets/llm-service-account-cassie.json \
            -e OPENAI_API_KEY=/secrets/openai-key.json \
            -e GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
            -e CHROMADB_HOST=${{ env.CHROMADB_HOST }} \
            -e CHROMADB_PORT=${{ env.CHROMADB_PORT }} \
            -e DEV=1 \
            -e CI=true \
            daily-meal-api-service \
            pipenv run pytest tests/ \
              --asyncio-mode=auto \
              --cov=api \
              --cov-report=xml:/coverage/coverage.xml

      # Cleanup ChromaDB
      - name: Cleanup ChromaDB
        if: always()
        run: |
          docker stop recipe-rag-chromadb || true
          docker rm recipe-rag-chromadb || true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: "**/coverage.xml"

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    env:
      CHROMADB_HOST: recipe-rag-chromadb
      CHROMADB_PORT: 8000
    steps:
      - uses: actions/checkout@v2
      - name: Create Docker Network
        run: docker network create recipe-rag-network || true
      - name: Setup Directories
        run: |
          mkdir -p src/secrets
          mkdir -p persistent-folder
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json
      - name: Run Integration Tests
        run: |
          cd tests/integration
          docker-compose build --no-cache
          docker-compose up --exit-code-from recipe-rag-cli --exit-code-from food-detection
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          CI: true
      - name: Print Docker logs on failure
        if: failure()
        run: |
          cd tests/integration
          docker-compose logs
      - name: Clean up
        if: always()
        run: |
          cd tests/integration
          docker-compose down -v
          docker network rm recipe-rag-network || true

  coverage-check:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
      - name: Check coverage threshold
        run: |
          pip install coverage
          coverage combine coverage.xml
          coverage report --fail-under=70