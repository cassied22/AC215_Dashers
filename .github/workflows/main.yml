name: CI/CD Pipeline

on:
  push:
    branches: [ milestone5 ]
  pull_request:
    branches: [ milestone5 ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - id: 'auth'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      # Create necessary directories and setup secrets
      - name: Setup environment
        run: |
          mkdir -p src/secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json

      # Data Pipeline Tests
      - name: Run Data Pipeline Tests
        run: |
          cd src/datapipeline
          chmod +x docker-shell.sh
          CI=true ./docker-shell.sh pytest ../tests/datapipeline/test_cli_rag.py \
            --cov=. \
            --cov-report=xml:/coverage/coverage.xml
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}

      # Food Detection Tests
      - name: Run Food Detection Tests
        run: |
          cd src/food-detection
          chmod +x docker-shell.sh
          CI=true ./docker-shell.sh pytest ../tests/food-detection/test_*.py \
            --cov=. \
            --cov-report=xml:/coverage/coverage.xml
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      # ML Pipeline Tests
      - name: Run ML Pipeline Tests
        run: |
          cd src/ml-pipeline
          chmod +x docker-shell.sh
          CI=true ./docker-shell.sh pytest ../tests/ml-pipeline/test_*.py \
            --cov=. \
            --cov-report=xml:/coverage/coverage.xml
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: "**/coverage.xml"

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Directories
        run: |
          mkdir -p src/secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > src/secrets/llm-service-account-cassie.json
          echo '${{ secrets.OPENAI_API_KEY }}' > src/secrets/openai-key.json
      
      - name: Run Integration Tests
        run: |
          cd tests/integration
          chmod +x docker-shell.sh
          ./docker-shell.sh
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          CI: true
      
      - name: Print Docker logs on failure
        if: failure()
        run: |
          cd tests/integration
          docker-compose logs
      
      - name: Clean up
        if: always()
        run: |
          cd tests/integration
          docker-compose down -v
          docker network rm recipe-rag-network || true

  coverage-check:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
      - name: Check coverage threshold
        run: |
          pip install coverage
          coverage combine coverage.xml
          coverage report --fail-under=70